import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold
from config import BOT_TOKEN
from utils import add_note, list_notes, get_note, delete_note
from datetime import datetime

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É‚ûï")],
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫üìã")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—Éüóë")]
    ],
    resize_keyboard=True
)

class AddNoteState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_passcode = State()

class ReadNoteState(StatesGroup):
    waiting_for_passcode = State()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_note_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    await state.set_state(AddNoteState.waiting_for_title)

@dp.message(AddNoteState.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)
        await state.clear()
        return
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    await state.set_state(AddNoteState.waiting_for_description)

@dp.message(AddNoteState.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    await state.set_state(AddNoteState.waiting_for_description)

@dp.message(AddNoteState.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = None if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(description=description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ '–±–µ–∑ –∫–æ–¥–∞':")
    await state.set_state(AddNoteState.waiting_for_passcode)

@dp.message(AddNoteState.waiting_for_passcode)
async def process_passcode(message: Message, state: FSMContext):
    data = await state.get_data()
    passcode = None if message.text.lower() == "–±–µ–∑ –∫–æ–¥–∞" else message.text
    try:
        note = await add_note(
            user_id=message.from_user.id,
            title=data["title"],
            description=data.get("description"),
            passcode=passcode
        )
        await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{note['title']}</b>", reply_markup=main_kb)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
    finally:
        await state.clear()

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
async def list_notes_handler(message: Message):
    notes = await list_notes(message.from_user.id)
    if not notes:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    text = "–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for note in notes:
        dt = datetime.fromisoformat(note['created_at'].replace("Z", "+00:00"))
        lock = "üîí" if note.get("passcode") else ""
        text += f"{hbold(note['id'])}: {note['title']} {lock} ({dt.strftime('%d.%m.%Y %H:%M')})\n"
    text += "\n–ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å: /read ID\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å: /delete ID"
    await message.answer(text)

@dp.message(Command("read"))
async def cmd_read(message: Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–§–æ—Ä–º–∞—Ç: /read ID")
        return
    await state.update_data(note_id=int(parts[1]))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ '–Ω–µ—Ç':")
    await state.set_state(ReadNoteState.waiting_for_passcode)

@dp.message(ReadNoteState.waiting_for_passcode)
async def process_read_passcode(message: Message, state: FSMContext):
    data = await state.get_data()
    note_id = data["note_id"]
    passcode = None if message.text.lower() == "–Ω–µ—Ç" else message.text
    try:
        note = await get_note(note_id, passcode=passcode)
        await message.answer(f"<b>{note['title']}</b>\n\n{note['description'] or '(–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)'}")
    except PermissionError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.")
    except Exception:
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    finally:
        await state.clear()

@dp.message(Command("delete"))
async def cmd_delete(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–§–æ—Ä–º–∞—Ç: /delete ID")
        return
    note_id = int(parts[1])
    success = await delete_note(note_id)
    await message.answer("–£–¥–∞–ª–µ–Ω–∞." if success else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
